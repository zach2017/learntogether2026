plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id "com.github.node-gradle.node" version "7.0.2"
    id "io.sentry.jvm.gradle" version "5.11.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'Demo Learning project for Spring Boot'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// ===================================================================
// START: JAR Configuration
// ===================================================================

jar {
    enabled = true
    archiveClassifier = '' // This creates a plain JAR without classifier
    manifest {
        attributes(
            'Main-Class': 'com.example.DemoApplication', // Replace with your main class
            'Implementation-Title': project.description,
            'Implementation-Version': project.version,
            'Implementation-Group': project.group
        )
    }
}

// If you want both executable JAR and plain JAR
bootJar {
    archiveClassifier = 'boot'
    launchScript()
}

// ===================================================================
// END: JAR Configuration
// ===================================================================

// ===================================================================
// START: Frontend Build Configuration
// ===================================================================

node {
    version = '20.17.0'
    download = true
}

def frontendDir = file("${project.projectDir}/frontend")

// Task to run 'npm install'. Renamed to avoid conflict with the plugin's default task.
task installFrontend(type: NpmTask) { // <-- LINE 1: RENAMED HERE
    workingDir = frontendDir
    args = ['install']
}

// Task to run 'npm run build' which is defined in your package.json.
// This task depends on 'installFrontend' to ensure dependencies are installed first.
task npmBuild(type: NpmTask) {
    dependsOn installFrontend // <-- LINE 2: UPDATED DEPENDENCY HERE
    workingDir = frontendDir
    args = ['run', 'build']
}

task copyReactBuild(type: Copy) {
    dependsOn npmBuild
    from "${frontendDir}/dist"
    into "${buildDir}/resources/main/static"
}

processResources.dependsOn copyReactBuild

tasks.named('clean', Delete) {
    delete "${frontendDir}/node_modules", "${frontendDir}/dist"
}

// ===================================================================
// END: Frontend Build Configuration
// ===================================================================

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    //implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.sentry:sentry-opentelemetry-agent:8.22.0'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    runtimeOnly 'io.micrometer:micrometer-registry-otlp'
    compileOnly 'org.projectlombok:lombok'
   // developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}