events {
    worker_connections 1024;
}

http {
    upstream backend {
        # Primary server with failover to backup
        server primary:80 max_fails=3 fail_timeout=5s;
        server backup:80 backup max_fails=3 fail_timeout=5s;
        keepalive 32;
    }

    # Log format for tracking
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream: $upstream_addr';

    access_log /var/log/nginx/access.log main;

    server {
        listen 80;
        server_name localhost;

        location / {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Failover timeout settings
            proxy_connect_timeout 2s;
            proxy_send_timeout 2s;
            proxy_read_timeout 2s;
            
            # Allow retries on failure
            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
        }

        # Health check endpoint
        location /health {
            access_log off;
            default_type application/json;
            return 200 '{"status":"ok","timestamp":"$msec"}';
        }

        # Status endpoint to see routing info
        location /status {
            default_type application/json;
            return 200 '{"service":"load_balancer","upstream":"backend"}';
        }
    }
}